#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

sem_t semaphore;

void* process(void* arg) {
    int processId = *((int*)arg);

    printf("Process P%d is waiting...\n", processId);
    sem_wait(&semaphore); // Wait operation on semaphore

    printf("Process P%d has acquired the resource.\n", processId);

    // Simulating some work being done by the process
    sleep(2);

    printf("Process P%d is releasing the resource.\n", processId);
    sem_post(&semaphore); // Signal operation on semaphore

    pthread_exit(NULL);
}

int main() {
    int numInstances = 4; // Number of instances of the resource
    int numProcesses = 4; // Number of processes

    sem_init(&semaphore, 0, numInstances); // Initialize semaphore with number of instances

    pthread_t threads[numProcesses];
    int processIds[numProcesses];

    // Create and execute the threads representing the processes
    for (int i = 0; i < numProcesses; i++) {
        processIds[i] = i + 1;
        pthread_create(&threads[i], NULL, process, &processIds[i]);
    }

    // Wait for all threads to finish
    for (int i = 0; i < numProcesses; i++) {
        pthread_join(threads[i], NULL);
    }

    sem_destroy(&semaphore); // Destroy the semaphore

    // Another process requesting the same resource
    printf("\nProcess P5 is waiting...\n");
    sem_wait(&semaphore); // Wait operation on semaphore

    printf("Process P5 has acquired the
